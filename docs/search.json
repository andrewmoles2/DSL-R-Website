[
  {
    "objectID": "R_dissertation_1_first_steps.html",
    "href": "R_dissertation_1_first_steps.html",
    "title": "R Dissertation Masterclass 1: First steps with R",
    "section": "",
    "text": "Learning Objectives\nIn this worksheet we are going to take a short tour of key data types in R:\n\nVariables\nVectors\nStrings\nData frames\n\nOur project for this worksheet is to do some simple health metric analysis. By the end of this worksheet you should have the outputs shown below, and a .csv file with your data you made.\n \n \nWe will go through several steps to build up to this!\n\n\nSetup\nTo get started you will need to follow the below steps:\n\nOpen RStudio.\nDownload the R script provided, which provides you with some structure.\n\n Download R script file \n\nOpen the R Script R_dissertation_1.R you downloaded.\n\nFor help getting starting using RStudio and either script or R Markdown files, we have written a guide to help you out.\nEach section is a small project. You will need to write all the code yourself.\n\n\nStarting off: calculate your own health metrics!\nYou’ve started a health kick after watching some inspirational videos online. They suggested a good first step is to keep track of your health metrics via BMI and waist to hip ratio calculations. As you are learning R, it seems like a good place to start.\nR is an excellent calculator. See the example where we work out 10 times 5.\n\n10 * 5\n\n[1] 50\n\n\nYou can find the formula for BMI on the British Heart Foundation website.\nThe waist-to-hip ratio metric is another measure of health that is designed to look for people at higher risk of conditions like heart disease or type 2 diabetes.\nIf you don’t know what your metrics are, try using the data for Andrew:\n\nHeight: 1.95 meters\n\nWeight: 94 kilograms\n\nHip width: 107 centimetres\n\nWaist width: 90 centimetres\n\nUsing the data for Andrew you should get the outputs of:\nBMI: 24.7205786\nWaist-Hip ratio: 0.8411215\n\n\nSteamlining with variables\nYour friend Seb saw what you did and asked you to do the same for him, but he is only interested in BMI for now. Seb, who has done some programming, suggested using variables to streamline your code!\nA variable is a way of storing information. For example if we wanted to store the value 7 with a name of days_in_week, we would write days_in_week &lt;- 7. days_in_week = 7 will also work.\nUse the metrics you used in the last exercise. Seb’s metrics are:\n\nHeight: 1.71 meters\n\nWeight: 68 kilograms\n\nYour goal is a text output that is like: Andrew has a BMI of 24.72, and Seb has a BMI of 23.26.\n\nHint 1Hint 2\n\n\nTo make the output we have done something called string concatenation. In R you would use the paste() or paste0() functions for this. For example, paste(\"Jim is\", 25, \"years old\").\n\n\nWe rounded our outputs. You can do the same using the round() function. Try running ?round() to see the documentation for the function to help you use it.\n\n\n\n\n\nUsing vectors to store more information\nYou’ve been telling your family about your coding exploits and they are keen for you to do the same calculations for them.\nNow we are using more data, it might start to get cumbersome to use variables. It would be easier to store multiple data in one named variable which are known as vectors in R. The example below stores the days of the week as text. We use the c() function to make vectors.\n\ndays_of_week &lt;- c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")\ndays_of_week\n\n[1] \"Mon\" \"Tue\" \"Wed\" \"Thu\" \"Fri\" \"Sat\" \"Sun\"\n\n\n\n\nYou get the below information from your family:\n\nNames: Andrew, Sam (Mum), Jules (Dad), Ash, Robin\n\nHeights: 1.95, 5.09, 1.65, 1.91, 186\nWeights: 94, 9.135, 9.6075, 89, 81\n\n\nDifferent family members have used different metrics:\n\nRobin has used centimetres for height\n\nJules (Dad) has used feet for height\n\nSam (Mum) and Jules (Dad) have used stone for weight\n\n\n\nBelow are some formulas to help you do the calculations:\n\ncentimetres to feet: \\(centimetres \\times 0.0328084\\)\n\ncentimetres to meters: \\(centimetres \\div 100\\)\n\nfeet to meters: \\(feet \\times 0.3048\\)\nstone to kilograms: \\(stone \\times 6.35029318\\)\n\nYour goal has four parts. Make sure to use R to do all the calculations and conversions.\n\nFirst, make sure all family heights are in meters with the output:\n\n1.95, 1.551432, 1.65, 1.91, 1.86.\n\n\nSecond, make sure all family weights are in kilograms with the output:\n\n94, 58.0099282, 61.0104417, 89, 81.\n\n\nThird, calculate the BMI for all family members with the output:\n\n24.7205786, 24.1010985, 22.4097123, 24.3962611, 23.4131113.\n\n\nFourth, calculate the average BMI of the family members. You should get an output of:\n\n23.8081524.\n\nHint 1Hint 2Hint 3\n\n\nYou need to make the vectors using the c() function from the information provided.\n\n\nTo convert the data, you will need to access the data point you want to convert using a technique called indexing. You can do this using square brackets, and the number of the element in the vector you want to change. If I wanted to access Mon in days_of_week I would write days_of_week[1] because it is the first element.\n\n\nR has lots of useful functions to help you out. For the average try searching online to find a function that can help you calculate the average of family_bmi.\n\n\n\n\n\nWrite out your data for your parents\nYour parents are wowed by your skills! They asked if you can give them a csv or Excel file to play around with, they are not ready to learn any programming yet. While you were at it, you thought it would be fun to run some summary statistics and make a histogram on the data you have made!\n\nMake a data frame that looks like the example output below.\n\n\n\n  family_names family_heights family_weights family_bmi\n1       Andrew       1.950000       94.00000   24.72058\n2    Sam (Mum)       1.551432       58.00993   24.10110\n3  Jules (Dad)       1.650000       61.01044   22.40971\n4          Ash       1.910000       89.00000   24.39626\n5        Robin       1.860000       81.00000   23.41311\n\n\n\nSave the data frame you made to a csv file (comma separated values, or .csv). Open it outside of R to check it has saved properly.\n\nUse the str() and summary() functions to have a look at your data. You should get outputs below.\n\n\n\n family_names       family_heights  family_weights    family_bmi   \n Length:5           Min.   :1.551   Min.   :58.01   Min.   :22.41  \n Class :character   1st Qu.:1.650   1st Qu.:61.01   1st Qu.:23.41  \n Mode  :character   Median :1.860   Median :81.00   Median :24.10  \n                    Mean   :1.784   Mean   :76.60   Mean   :23.81  \n                    3rd Qu.:1.910   3rd Qu.:89.00   3rd Qu.:24.40  \n                    Max.   :1.950   Max.   :94.00   Max.   :24.72  \n\n\n'data.frame':   5 obs. of  4 variables:\n $ family_names  : chr  \"Andrew\" \"Sam (Mum)\" \"Jules (Dad)\" \"Ash\" ...\n $ family_heights: num  1.95 1.55 1.65 1.91 1.86\n $ family_weights: num  94 58 61 89 81\n $ family_bmi    : num  24.7 24.1 22.4 24.4 23.4\n\n\n\nMake a histogram of the BMI column in your data. An example output is below.\n\n\n\n\n\n\n\n\n\n\n\nHint 1Hint 2Hint 3\n\n\nTo save the csv file we recommend you use the write.csv()function. To find out more information on how to use this function either type ?write.csv or search for it in the help menu which is in the bottom right panel in RStudio.\n\n\nWe saved our file without row names. To do this you need to add an argument to the write.csv() function. Have a look at the help page, particularly the examples section at the bottom, to see if you can figure out how to do this.\n\n\nUse ?hist to find out more about how to run a histogram and make the changes we did to the output below. We changed the colour, the title (also called main), and the x label.\n\n\n\n\n\n\n\n\n\nQuick side note naming\n\n\n\n\n\nThere is a best practice when naming variables, vectors, data frames, column names etc. Variable names should be lowercase. Use an underscore (_) to separate words within a name. Generally, variable names should be nouns. Strive for names that are concise and meaningful. For example, day_one is good but dayOne or dayone are less good.\n\n\n\n\n\nGive us some feedback!\nWe are always looking to improve and iterate our workshops. Follow the link below to give your feedback.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 First steps with R"
    ]
  },
  {
    "objectID": "whyR.html",
    "href": "whyR.html",
    "title": "Why learn R",
    "section": "",
    "text": "There are a lot of reasons why you should learn R, and it is very prevalent in academia, bioinformatics (analysis of biological data), data analyst and data scientist roles\nA lot of LSE courses that involved statistics or data primarily use R. This is because R is a excellent tool for:\nR is an open-source tool, which means you do not need to buy a licence in order to use it, and is a popular programming language, as shown in the PYPL index from 2023",
    "crumbs": [
      "📚 Information",
      "📊 Why learn R"
    ]
  },
  {
    "objectID": "whyR.html#easy-to-learn",
    "href": "whyR.html#easy-to-learn",
    "title": "Why learn R",
    "section": "Easy to learn",
    "text": "Easy to learn\nA key advantage of R is that it is retentively easy to learn, especially in comparison with other programming languages used for data analysis like Python. A large part of this is due to R being designed to work with data, so it feels natural, and some of the excellent extensions that have been added to R over the years to make it more slick (great examples are the tidyverse and data.table packages).\nFurther, there are the vast amount of online resources in forms of tutorials, blogs, online courses, people sharing code/examples and help available through online discussion forums like stackoverflow and slack.\nSome of the best available resources to learn R are:\n\nR for Data Science book and the first edition is still great\nR for Data Science slack channel has great community support\nCodecademy R course\nR bloggers collates blog posts about R. Some blogs I would recommend checking out are https://www.cedricscherer.com/, https://karaman.is/, https://djnavarro.net/, https://github.com/tashapiro/TidyTuesday, https://www.yan-holtz.com/blog.html, and https://albert-rapp.de/blog.html\nFor data visualisation ggplot2 is the go to tool, and the best way to learn it is to run through this book and using the R graph gallery\nFor getting some open source data to start your own projects I would recommend the tidy Tuesday initiative. All dataset are hosted in github.",
    "crumbs": [
      "📚 Information",
      "📊 Why learn R"
    ]
  },
  {
    "objectID": "whyR.html#some-examples-of-r-being-awesome-for-data-visualisation",
    "href": "whyR.html#some-examples-of-r-being-awesome-for-data-visualisation",
    "title": "Why learn R",
    "section": "Some examples of R being awesome for Data visualisation",
    "text": "Some examples of R being awesome for Data visualisation\n\n\n\n\n\n\n\nAnimated gif of rainfall and temperature changes over time in Australian cities\n\n\n\n\n\n\n\n\n\nRegional map UK showing how each area is doing in terms of gender pay equality for each year data has existed, from 2017-2022\n\n\n\n\n\n\n\n\nFun side note\n\n\n\n\n\nThis webpage was built using R. If you are interested, come to the workshops and chat to one of the instructors about it!\n\n\n\n\n\n\n\nInteractive graphic of Dr Who episodes IMDB rating by actor playing the Doctor\n\n\nBelow is an example of using the http://quanteda.io/ package for text analysis, which is developed here at LSE by Ken Benoit. It is a visualisation to show how readable inaugural speeches from presidents have been since 1945. A higher score means the text used in the speech more readable.\n\n\nShow the code\n# load libraries\nlibrary(quanteda)\nlibrary(quanteda.textstats)\nlibrary(ggplot2)\n\n# prepare data\ninaugural_readability &lt;- data_corpus_inaugural %&gt;%\n    corpus_subset(Year &gt; 1945) %&gt;% \n    textstat_readability(measure = c(\"Flesch\"))\n\n# calculate readability\navg_readability &lt;- mean(inaugural_readability$Flesch)\n\n# text and point colours\npoint_col &lt;- \"black\"\ntext_col &lt;- \"white\"\n\n# make visual\nggplot(inaugural_readability, \n       aes(x = document, y = Flesch)) +\n  geom_point(size = 6.5, colour = point_col) +\n  geom_hline(yintercept = avg_readability,\n             alpha = 0.75, linetype = 5, linewidth = 1.2) +\n  geom_segment(aes(xend = document, yend = avg_readability),\n               linetype = 3, linewidth = 1.2) +\n  geom_text(aes(label = round(Flesch, 1)), \n            colour = text_col, size = 2.5, family = \"Avenir\") +\n  annotate(geom = \"text\", x = \"2005-Bush\", y = 69,\n           family = \"Avenir\", size = 4,\n           label = paste0(\"Average readability: \", round(avg_readability,2))) +\n  annotate(geom = \"curve\",x = 14.5, y = 66, alpha = 0.6,\n           xend = \"2005-Bush\", yend = avg_readability+0.4,\n           curvature = -0.35, arrow = arrow(length = unit(0.15, \"inches\"))) +\n  coord_flip() +\n    labs(x = NULL, y = \"Readability (Flesch)\",\n         title = \"Readability of inaugural speeches since 1945\",\n         subtitle = \"Higher score means text is more readable\") +\n  theme_minimal(base_family = \"Avenir\") +\n  theme(plot.title.position = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\nPYPL index 2023\nAnimated gif of rainfall and temperature changes over time in Australian cities\nRegional map UK showing how each area is doing in terms of gender pay equality for each year data has existed, from 2017-2022",
    "crumbs": [
      "📚 Information",
      "📊 Why learn R"
    ]
  },
  {
    "objectID": "example-page.html",
    "href": "example-page.html",
    "title": "R Testing ground",
    "section": "",
    "text": "On this page, you can play around with R through this website!\nBelow is an example:\n🟡 Loading\n  webR...\n\n\n  \n\n\nAnother example looking at some star wars data:\n🟡 Loading\n  webR...",
    "crumbs": [
      "❓ Other information",
      "🧪 R Testing Ground"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Digital Skills Lab R workshops",
    "section": "",
    "text": "This website provides and introduction to the R workshops run by the Digital Skills Lab (DSL) at LSE. You can navigate this website using the top bar menu, where you can find information about:\n\nWhy R is a popular programming language and why you should learn it\nHow to install R and RStudio on to your own laptops\nInformation about the workshops which includes download links\nHow to get started with the workshops materials\nMaterials for dissertation workshops\nFrequently asked questions about the workshops and R\nA testing ground for playing around with R where you can run R through this website\n\nFor support email the use at Digital.Skills.Lab@lse.ac.uk.",
    "crumbs": [
      "📚 Information",
      "🏠 Home"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html",
    "href": "R_dissertation_2_data_cleaning.html",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "",
    "text": "As part of a research project you have been given some data that you are expected to clean yourself ready for analysis. The data is health report metrics taken from various London boroughs.\nWe have two goals for this project. The first is to clean the dataset, and the second is to make an aggregation on the cleaned data.\nNote the data is randomly generated but is based on the kind of dataset would see in the real world; the deprivation data we are using is real.\nKey takeaways from this worksheet:\n\nHow to use packages in R\nLoading in datasets with different file extensions\nDoing calculations across columns in a data frame\nUsing conditional operators (logic) to clean and prepare data\nFinding and handling missing data\nTransforming data through mutating joins\nExploring data through grouped aggregations",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#recommended-tidy-up-the-column-names-of-the-deprivation-imd-data",
    "href": "R_dissertation_2_data_cleaning.html#recommended-tidy-up-the-column-names-of-the-deprivation-imd-data",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "Recommended: tidy up the column names of the deprivation (IMD) data",
    "text": "Recommended: tidy up the column names of the deprivation (IMD) data\nTo tidy up the column names we recommend using the janitor package and the clean_names() function. Examples can be found here.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#a-side-note-on-the-english-indices-of-deprivation-imd-data",
    "href": "R_dissertation_2_data_cleaning.html#a-side-note-on-the-english-indices-of-deprivation-imd-data",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "A side note on the English indices of deprivation (IMD) data",
    "text": "A side note on the English indices of deprivation (IMD) data\nThe IMD2019.xlsx dataset is from the English indices of deprivation website 2019. Indices of deprivation (IMD) measure relative deprivation in small areas in England, where lower decile scores indicate a more deprived area.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#tips-to-help-cleaning-the-height-and-weight-columns",
    "href": "R_dissertation_2_data_cleaning.html#tips-to-help-cleaning-the-height-and-weight-columns",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "Tips to help cleaning the height and weight columns",
    "text": "Tips to help cleaning the height and weight columns\nThis isn’t straightforward to fix so we have to make assumptions which are listed below.\n\nif height is &gt; 8 assume it is in centimetres\nif height is &gt; 4 and &lt; 8 assume it is in feet\nif weight is &lt; 25 assume it is in stone\n\nBelow are some converting formulas to help you out:\n\ncentimetres to meters: \\(centimetres \\div 100\\)\nfeet to meters: \\(feet \\times 0.3048\\)\nstone to kilograms: \\(stone \\times 6.35029318\\)\n\nWe are going to need to use conditional operators to find and fix the incorrect data points. The table below contains the conditional operators you can use.\n\n\n\nOperator\nMeaning\n\n\n\n\n&gt;\nGreater than\n\n\n&gt;=\nGreater than or equal to\n\n\n&lt;\nLess than\n\n\n&lt;=\nLess than or equal to\n\n\n==\nEqual to\n\n\n!=\nNot equal to\n\n\n!X\nNOT X\n\n\nX | Y\nX OR Y\n\n\nX & Y\nX AND Y\n\n\nX %in% Y\nis X in Y\n\n\n\nIn R, the easiest way to conditionally fix data is to use the ifelse() function, or the case_when() function from dplyr. To add a new column the transform() function or the mutate() function from dplyr are easiest to use. See below for some examples.\n\ndf &lt;- data.frame(\n  x = c(4.26, 6.05, 5.35, 6.49, 7.68, 4.32, 4.92, 4.18, 4.32, 0.61)\n  )\n\ndf_clean &lt;- transform(\n  df,\n  x_5 = ifelse(x &gt; 5, x * 100, x)\n  ) \n\nlibrary(dplyr)\ndf_clean &lt;- mutate(\n  df,\n  x_5 = case_when(\n    x &gt; 5 ~ x * 100,\n    .default = x\n    )\n  )\n\ndf_clean\n\n      x    x_5\n1  4.26   4.26\n2  6.05 605.00\n3  5.35 535.00\n4  6.49 649.00\n5  7.68 768.00\n6  4.32   4.32\n7  4.92   4.92\n8  4.18   4.18\n9  4.32   4.32\n10 0.61   0.61",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#top-tip-for-multiple-categories",
    "href": "R_dissertation_2_data_cleaning.html#top-tip-for-multiple-categories",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "Top tip for multiple categories",
    "text": "Top tip for multiple categories\nWhen you are making multiple categories things can get messy using the ifelse() function as you have to do something called nested ifelse statements.\nWe would recommend using the case_when() function from dplyr for multiple categories as it makes things much easier. Check out the examples in the documentation page to help you out!",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#information-on-joins",
    "href": "R_dissertation_2_data_cleaning.html#information-on-joins",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "Information on joins",
    "text": "Information on joins\nA join is used to combine rows from two or more tables. There are four main types you are likely to need in R:\n\ninner join finds matches between both data frames and drops everything else\nleft join includes all of the data from the left data frame, and matches from the right\nright join includes all of the data from the right data frame, and matches from the left\nfull join includes all data from both data frames\n\n   \nIn order to perform a join we need a column in each dataset, in this case health_metrics.csv and IMD2019.xlsx, to have matching data. Take a look now at the lsoa_code column in your health metrics data, and then the lsoa_code_2011 column in your IMD data. What do you notice? Do you think we can use those to link up the datasets? If so, which join do you think should be used?\nTo perform a join using R, we can use the dplyr library. Below is some example code for you to look at and play around with.\n\nlibrary(dplyr)\n\nperson_info &lt;- data.frame(\n  p_id = c(1,2,3,4,5,6),\n  Name = c(\"Andrew\", \"Chloe\", \"Antony\", \"Cleopatra\", \"Zoe\", \"Nathan\")\n  )\n\nfood_info &lt;- data.frame(\n  p_id = c(1, 4, 7),\n  Fav_Food = c(\"Pizza\", \"Pasta con il pesto alla Trapanese\", \"Egg fried rice\")\n)\n\nperson_food &lt;- full_join(person_info, food_info,\n                         by = join_by(p_id == p_id))\nperson_food\n\n  p_id      Name                          Fav_Food\n1    1    Andrew                             Pizza\n2    2     Chloe                              &lt;NA&gt;\n3    3    Antony                              &lt;NA&gt;\n4    4 Cleopatra Pasta con il pesto alla Trapanese\n5    5       Zoe                              &lt;NA&gt;\n6    6    Nathan                              &lt;NA&gt;\n7    7      &lt;NA&gt;                    Egg fried rice\n\n\nWhat do you think would happen to the output if we used a inner join or a left join?\nThe dplyr documentation has a nice guide on joins in R. The R for Data Science book also has some useful information on this technique for further reading.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "R_dissertation_2_data_cleaning.html#but-what-is-grouped-aggregation-and-how-do-i-do-it-in-r",
    "href": "R_dissertation_2_data_cleaning.html#but-what-is-grouped-aggregation-and-how-do-i-do-it-in-r",
    "title": "R Dissertation Masterclass 2: Data Cleaning",
    "section": "But what is grouped aggregation? And how do I do it in R?",
    "text": "But what is grouped aggregation? And how do I do it in R?\nGrouped aggregation is the computation of summary statistics (such as the mean), giving a single output value from several variables. You can perform more complicated aggregations by grouping your data. This is similar to a pivot table in Excel. Have a look at the images below which break down what grouped aggregation is.\n\nYou can group your data by more than one group. This means when the data is split, more subsets are formed for all different possible splits.\n\nThe R for Data Science book has some helpful examples on how to do this in R as does the dplyr documentation.\nTip: you can use the arrange() function to order the output in a more meaningful way.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data cleaning"
    ]
  },
  {
    "objectID": "workshop-materials.html",
    "href": "workshop-materials.html",
    "title": "Information about the workshops and how to get the materials",
    "section": "",
    "text": "Each workshop is 2 hours long\nYou choose which topic to work on. It is advised to work through the materials in the prescribed order unless you are already familiar with a particular topic\nYou will work with fellow learners, utilising your prior experience and web searches to find solutions, with a R expert on hand if you get stuck\nWorkshop sessions are hands on and practical\nEach worksheet will take on average 1 hour to complete (some longer, some shorter)\n\nTo prepare for the in-person workshops you need to get the materials. Below is information and steps on how to do this, as well as information on what is covered and recommended pathways.",
    "crumbs": [
      "💻 R workshops",
      "📖 Workshop Materials"
    ]
  },
  {
    "objectID": "workshop-materials.html#workshop-format",
    "href": "workshop-materials.html#workshop-format",
    "title": "Information about the workshops and how to get the materials",
    "section": "",
    "text": "Each workshop is 2 hours long\nYou choose which topic to work on. It is advised to work through the materials in the prescribed order unless you are already familiar with a particular topic\nYou will work with fellow learners, utilising your prior experience and web searches to find solutions, with a R expert on hand if you get stuck\nWorkshop sessions are hands on and practical\nEach worksheet will take on average 1 hour to complete (some longer, some shorter)\n\nTo prepare for the in-person workshops you need to get the materials. Below is information and steps on how to do this, as well as information on what is covered and recommended pathways.",
    "crumbs": [
      "💻 R workshops",
      "📖 Workshop Materials"
    ]
  },
  {
    "objectID": "workshop-materials.html#workshop-pathways",
    "href": "workshop-materials.html#workshop-pathways",
    "title": "Information about the workshops and how to get the materials",
    "section": "Workshop pathways",
    "text": "Workshop pathways\nThe files for the workshops are broken into four different series: Fundamentals, Intermediate, Data Wrangling, and Data Visualisation. There are several pathways through the workshops depending on your needs and preferences which are shown in the flow diagrams below.\n\n\n\nFlow diagram showing the full R series of workshops and a recommended route\n\n\n\n\n\nFlow diagram showing the pathway for those that are primarily interested in using R for data analysis and visualisation, with an option to do the intermediate series\n\n\n\n\n\nFlow diagram showing the pathway for those that are interested in learning programming with R, with option for those with some interest in also learning about data techniques\n\n\nThese flow diagrams were all made with R using the package DiagrammeR. The code that made them can be found on GitHub.",
    "crumbs": [
      "💻 R workshops",
      "📖 Workshop Materials"
    ]
  },
  {
    "objectID": "workshop-materials.html#workshop-materials",
    "href": "workshop-materials.html#workshop-materials",
    "title": "Information about the workshops and how to get the materials",
    "section": "Workshop materials",
    "text": "Workshop materials\nDownload the R Markdown files from each series below. Just press the button and the respective materials will download. Save the files where you can later find them.\n\nR Fundamentals\n Download R fundamentals files \n\n\nR Intermediate\n Download R intermediate files \n\n\nR Data Wrangling\n Download R data wrangling files \n\n\nR Data Visualisation\n Download R data visualisation files",
    "crumbs": [
      "💻 R workshops",
      "📖 Workshop Materials"
    ]
  },
  {
    "objectID": "workshop-materials.html#uncompressing-files-important",
    "href": "workshop-materials.html#uncompressing-files-important",
    "title": "Information about the workshops and how to get the materials",
    "section": "Uncompressing files (important)",
    "text": "Uncompressing files (important)\nOnce downloaded it is important that you unzip/uncompress the file. The download is a zip file, which a file that has been compressed to save space for easier transfer and storage. You should uncompress these files otherwise it can be hard for some software to use the files inside.\nWindows\nRight-click on the file and choose Extract All, then select a location to save the uncompressed file.\nMac\nDouble click on the file and the uncompressed contents will appear next to your compressed file.\n\n\n\nFlow diagram showing the full R series of workshops and a recommended route\nFlow diagram showing the pathway for those that are primarily interested in using R for data analysis and visualisation, with an option to do the intermediate series\nFlow diagram showing the pathway for those that are interested in learning programming with R, with option for those with some interest in also learning about data techniques",
    "crumbs": [
      "💻 R workshops",
      "📖 Workshop Materials"
    ]
  },
  {
    "objectID": "R_dissertation_3_exploring_using_visualisation.html",
    "href": "R_dissertation_3_exploring_using_visualisation.html",
    "title": "R Dissertation Masterclass 3: Exploring your data using visualisation",
    "section": "",
    "text": "We will be following on from our previous project where we cleaned health report metrics data taken from various London boroughs for a research project. Now we want to explore the data using visualisation and summary statistics which will help us when we come to analyse the data.\nKey takeaways:\n\nRun and review summary statistics\nLook at distributions of your data\nUsing counts and ranking to find out more from categorical data\nAssessing correlations between numeric variables\n\nThroughout this worksheet you’ll be making several visualisations of your data. There is also a final project goal, which is to make the visualisation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou might be wondering why are we not just analysing the data straight away. Generally, the best practise is to spend some time reviewing your data so you know what you are dealing with. We do this by running some summary statistics, and visualising the data.\nIf you are interested here is an article about the importance of reviewing your data.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Exploring data using visualisation"
    ]
  },
  {
    "objectID": "R_dissertation_3_exploring_using_visualisation.html#side-note-about-distributions-and-central-limit-theorm",
    "href": "R_dissertation_3_exploring_using_visualisation.html#side-note-about-distributions-and-central-limit-theorm",
    "title": "R Dissertation Masterclass 3: Exploring your data using visualisation",
    "section": "Side note about distributions and central limit theorm",
    "text": "Side note about distributions and central limit theorm\nSomething to keep in mind when looking at distributions of data is central limit theorem, which tells us that if you have a large enough sample your data will always be normally distributed. To help understand this concept have a look at this interactive explainer.\nWe can also use R as an example using the rnorm() function which randomly generates a distribution. Copy the paste the code below and run it in R a few times. You should see the first histogram with a sample of 50 changes a lot, but the histogram with a sample of 5000 doesn’t change much.\n\n\n\nhist(rnorm(50))\n\n\n\n\n\n\n\n\n\n\nhist(rnorm(5000))",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Exploring data using visualisation"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html",
    "href": "R_dissertation_4_data_analysis.html",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "",
    "text": "Perform tests of difference such as t-test and ANOVA\nPerform linear regression\nPick a dataset to clean, explore, and analyse!\n\nOur project for this worksheet is to run some analysis on the data we have been cleaning and visualising! By the end of the worksheet you will have performed a t-test, ANOVA, and multiple linear regression on the dataset.\nYou will also be given the opportunity to explore one of the example datasets provided, with a trainer on hand to help if needed.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#t-test",
    "href": "R_dissertation_4_data_analysis.html#t-test",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "t-test",
    "text": "t-test\nA t-test is used to compare the means of two groups. We have two questions we want to answer where a t-test is a good test to use.\nQuestion 1: is there a statistical difference of average index of multiple deprivation (IMD) decile between those who have high or normal blood pressure?\nYou should end up with a result like the output below.\n\n\n\n    Welch Two Sample t-test\n\ndata:  imd_decile by factor(blood_pressure)\nt = 0.00075095, df = 38.97, p-value = 0.9994\nalternative hypothesis: true difference in means between group high bp and group normal is not equal to 0\n95 percent confidence interval:\n -0.7869881  0.7875726\nsample estimates:\nmean in group high bp  mean in group normal \n             4.538462              4.538169 \n\n\n\n\n\n\n\n\nTip\n\n\n\nFactors are important when it comes to running statistical tests using R. To compare by groups you might need to convert your grouping variable (i.e. blood pressure) to a factor using factor().\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe output gives you lots of useful information. To know if there is a statistical difference you need to look at the t and the p-value. Generally a t over 2-2.5 will give you a significant difference, and you are looking for a p-value under 0.05.\n\n\nQuestion 2: is there a statistical difference in IMD decile between people who are from Hackney and Westminster?\nYou should end up with a result like the output below.\n\n\n\n    Welch Two Sample t-test\n\ndata:  hackney$imd_decile and westminster$imd_decile\nt = -19.481, df = 496.41, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -3.048357 -2.489812\nsample estimates:\nmean of x mean of y \n 2.818681  5.587766 \n\n\n\n\n\n\n\n\nTip\n\n\n\nYou will need to create a data frame for people who are from Hackney and people who are from Westminster.\n\n\n\n\n\n\n\n\nNote\n\n\n\nA p-value of 2.2e-16 represents a very small value in scientific notation. In decimal form, it is equivalent to 0.00000000000000022.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#anova",
    "href": "R_dissertation_4_data_analysis.html#anova",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "ANOVA",
    "text": "ANOVA\nAnalysis of variance (ANOVA) is a statistical test (or set of statistical models) used to compare the difference between means of groups.\nIn our previous t-test we wanted to know if there was a difference average IMD decile between people from Hackney and Westminster. What if we wanted to know if there is a statistical difference across all locations? We can use an ANOVA to test this difference!\nWe have looked at the difference between these groups previously. Have a look at the visual below. Do you think we might see a statistical difference between locations and the average IMD decile?\n\n\n\n\n\n\n\n\n\nOur question we want to answer: is there a difference in average IMD decile between London Boroughs?\nYou should end up with results like the outputs below.\n\n\n              Df Sum Sq Mean Sq F value Pr(&gt;F)    \nlocation       7   4432   633.1   158.4 &lt;2e-16 ***\nResiduals   2926  11693     4.0                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = imd_decile ~ location, data = health)\n\n$location\n                                    diff        lwr        upr     p adj\nCity of London-Camden         1.28133560  0.8386821  1.7239891 0.0000000\nHackney-Camden               -2.70599401 -3.1492705 -2.2627175 0.0000000\nIslington-Camden             -1.77952297 -2.2237452 -1.3353007 0.0000000\nLambeth-Camden               -1.48300866 -1.9203113 -1.0457060 0.0000000\nSouthwark-Camden             -1.64712430 -2.0973219 -1.1969267 0.0000000\nTower Hamlets-Camden         -1.76129504 -2.2074505 -1.3151396 0.0000000\nWestminster-Camden            0.06309063 -0.3765349  0.5027162 0.9998668\nHackney-City of London       -3.98732961 -4.4361629 -3.5384963 0.0000000\nIslington-City of London     -3.06085857 -3.5106259 -2.6110912 0.0000000\nLambeth-City of London       -2.76434426 -3.2072786 -2.3214099 0.0000000\nSouthwark-City of London     -2.92845991 -3.3841299 -2.4727900 0.0000000\nTower Hamlets-City of London -3.04263065 -3.4943075 -2.5909538 0.0000000\nWestminster-City of London   -1.21824497 -1.6634729 -0.7730171 0.0000000\nIslington-Hackney             0.92647104  0.4760905  1.3768515 0.0000000\nLambeth-Hackney               1.22298535  0.7794284  1.6665423 0.0000000\nSouthwark-Hackney             1.05886970  0.6025945  1.5151449 0.0000000\nTower Hamlets-Hackney         0.94469896  0.4924116  1.3969863 0.0000000\nWestminster-Hackney           2.76908464  2.3232374  3.2149319 0.0000000\nLambeth-Islington             0.29651431 -0.1479878  0.7410164 0.4661226\nSouthwark-Islington           0.13239867 -0.3247954  0.5895927 0.9879815\nTower Hamlets-Islington       0.01822793 -0.4349864  0.4714422 1.0000000\nWestminster-Islington         1.84261360  1.3958260  2.2894012 0.0000000\nSouthwark-Lambeth            -0.16411565 -0.6145893  0.2863580 0.9559037\nTower Hamlets-Lambeth        -0.27828638 -0.7247204  0.1681477 0.5574446\nWestminster-Lambeth           1.54609929  1.1061910  1.9860076 0.0000000\nTower Hamlets-Southwark      -0.11417074 -0.5732433  0.3449018 0.9952301\nWestminster-Southwark         1.71021494  1.2574859  2.1629440 0.0000000\nWestminster-Tower Hamlets     1.82438568  1.3756760  2.2730954 0.0000000\n\n\n\nHint 1Hint 2\n\n\nLocation needs to be made a factor for the test to run.\n\n\nWe used the following functions: aov(), summary(), and TukeyHSD().\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe test we have done here is called a one-way ANOVA. The key statistics we look for in an ANOVA test are the F value and the Pr(&gt;F).\nThe higher the F-value in an ANOVA, the higher the variation between sample means relative to the variation within the samples. The higher the F-value, the lower the corresponding p-value.\nThe Tukey multiple comparisons of means shows us all the different comparisons and which were or were not significantly different.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#side-note-on-dummy-variables",
    "href": "R_dissertation_4_data_analysis.html#side-note-on-dummy-variables",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "Side note on dummy variables",
    "text": "Side note on dummy variables\nDummy variables are artificial variables that take values of 0 or 1 to indicate the absence or presence of something.\n0 = absent\n1 = present\nBy convention if you have two or more variables, one variable is not coded so we have a comparison point (also known as a reference).\nFor example, if we give people a choice of three ice cream flavours and they tell us their favourite (Vanilla, Chocolate, or Pistachio), we would use two dummy variables. In the table below we have used vanilla as our comparison point with dummy variables for pistachio and chocolate.\n\n\n\nFavourite_ice_cream\ndummy_pistachio\ndummy_chocolate\n\n\n\n\nVanilla\n0\n0\n\n\nChocolate\n0\n1\n\n\nPistachio\n1\n0\n\n\nVanilla\n0\n0\n\n\nVanilla\n0\n0\n\n\nChocolate\n0\n1\n\n\n\nWhen you look your regression output you will see all the different categories apart from your comparison/reference variable.\nYou do not need to create dummy variables in R, this is handled automatically using factors. There is a useful explanation of dummy variables in this book.\nAn important thing to note about using factors as dummy variables is the first level in that factor will be used as your reference. To change this you need to change the order of your factor levels.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#building-regression-models",
    "href": "R_dissertation_4_data_analysis.html#building-regression-models",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "Building regression models",
    "text": "Building regression models\nOur question is around the IMD decile. We want to know what the relationship is with the IMD decile with other variables in our dataset. As IMD decile is our focus this will be our dependent variable.\nModel 1: Simple linear regression\nFor our first model we are wanting to know the relationship between our dependent variable IMD decile and an independent variable of waist to hip ratio (whr).\nYou should end up with result like the output below.\n\n\n\nCall:\nlm(formula = imd_decile ~ whr, data = health)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.6298 -1.5692 -0.5455  1.4632  5.6012 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   5.0547     0.5160   9.795   &lt;2e-16 ***\nwhr          -0.6109     0.6082  -1.004    0.315    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.345 on 2932 degrees of freedom\nMultiple R-squared:  0.000344,  Adjusted R-squared:  3.041e-06 \nF-statistic: 1.009 on 1 and 2932 DF,  p-value: 0.3152\n\n\nModel 2: Multiple linear regression\nFor our second model we are wanting to know the relationship between our dependent variable IMD decile, imd_decile, and an independent variables of location, BMI, waist to hip ratio, and age.\nYou should end up with result like the output below.\n\n\n\nCall:\nlm(formula = imd_decile ~ location + bmi + whr + age, data = health)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.6673 -1.5906 -0.0768  1.2854  6.2056 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            7.387032   0.488719  15.115   &lt;2e-16 ***\nlocationCamden        -1.286067   0.146982  -8.750   &lt;2e-16 ***\nlocationHackney       -4.007404   0.148922 -26.909   &lt;2e-16 ***\nlocationIslington     -3.090634   0.149319 -20.698   &lt;2e-16 ***\nlocationLambeth       -2.777376   0.146672 -18.936   &lt;2e-16 ***\nlocationSouthwark     -2.925688   0.150988 -19.377   &lt;2e-16 ***\nlocationTower Hamlets -3.052334   0.149878 -20.366   &lt;2e-16 ***\nlocationWestminster   -1.226694   0.147252  -8.331   &lt;2e-16 ***\nbmi                    0.001591   0.006465   0.246    0.806    \nwhr                   -0.822813   0.522622  -1.574    0.116    \nage                    0.001784   0.002019   0.884    0.377    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.003 on 2896 degrees of freedom\n  (27 observations deleted due to missingness)\nMultiple R-squared:  0.2767,    Adjusted R-squared:  0.2742 \nF-statistic: 110.8 on 10 and 2896 DF,  p-value: &lt; 2.2e-16\n\n\n\nHint 1Hint 2\n\n\nFor our model we moved our dummy variable reference to City of London by changing the order of the factor levels. This is because City of London has the highest IMD decile average.\n\n\nThe lm() function is the simplest way to run OLS models in R.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to just look at the coefficients of the model we can use the coefficients() function. If we wanted to use a different modelling family to OLS we would use the glm() function and specify which model family to use such as binomial which is a logit model. Across R the way of building models is very similar to using the lm() function.",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#wiki-temperature-data",
    "href": "R_dissertation_4_data_analysis.html#wiki-temperature-data",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "Wiki temperature data",
    "text": "Wiki temperature data\nThis dataset is a list, taken from Wikipedia, of the average temperatures of world cities. To get the data, use the code provided below.\nThe rvest package should have been installed when you installed the tidyverse set of packages. It is used to scrape data from the web using R.\n\nlibrary(rvest)\nlibrary(tidyverse)\n\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_cities_by_average_temperature\"\n\nwebpage &lt;- read_html(url)\n\ncity_table &lt;- html_nodes(webpage, \"table\") %&gt;%\n  html_table(fill = TRUE) %&gt;%\n  bind_rows() %&gt;%\n  select(-Ref.) %&gt;%\n  mutate(across(everything(), function(x) str_remove_all(x, \"\\\\(.*\\\\)\"))) %&gt;%\n  mutate(across(Jan:Year, function(x) str_replace(x, \"−\", \"-\"))) %&gt;%\n  mutate(across(Jan:Year, as.numeric))",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#uk-gender-pay-gap-data",
    "href": "R_dissertation_4_data_analysis.html#uk-gender-pay-gap-data",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "UK Gender pay gap data",
    "text": "UK Gender pay gap data\nThis data provides information on differences in pay between men and women in the UK. Data is from the Office of National Statistics and was collected from one of their data pages.\nUse the code below to load the data.\n\npaygap &lt;- read.csv(\"https://raw.githubusercontent.com/andrewmoles2/TidyTuesday/master/paygap-2022-06-28/data/paygap.csv\")",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#eurovision-song-contest",
    "href": "R_dissertation_4_data_analysis.html#eurovision-song-contest",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "Eurovision song contest",
    "text": "Eurovision song contest\nThe Eurovision song contest is a music competition that runs every year. Data was collected and made available through this GitHub page.\nUse the code below to load the data.\n\neurovision &lt;- read.csv(\"https://raw.githubusercontent.com/andrewmoles2/eurovision-contest/main/data/eurovision_data.csv\")",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "R_dissertation_4_data_analysis.html#pokémon-video-game-data",
    "href": "R_dissertation_4_data_analysis.html#pokémon-video-game-data",
    "title": "R Dissertation Masterclass 4: Data Analysis",
    "section": "Pokémon video game data",
    "text": "Pokémon video game data\nPokémon is a card game, TV series, and video game. This dataset is based on the video game. Data has been collected and made available through this GitHub page\nUse the code below to load the datasets.\n\npokemon_stats &lt;- read.csv(\"https://raw.githubusercontent.com/andrewmoles2/pokemon-video-games/main/data/pokemon_stats.csv\")\npokemon_types &lt;- read.csv(\"https://raw.githubusercontent.com/andrewmoles2/pokemon-video-games/main/data/pokemon_types.csv\")",
    "crumbs": [
      "🎓 R Dissertation workshops",
      "🎓 Data analysis"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "This page is about getting R and RStudio installed on your laptop so you can start using R! Below are step by step instructions for getting the software needed installed.",
    "crumbs": [
      "💻 R workshops",
      "🛠️ Install R and RStudio"
    ]
  },
  {
    "objectID": "install.html#windows-install",
    "href": "install.html#windows-install",
    "title": "Installing R and RStudio",
    "section": "Windows install",
    "text": "Windows install\n\nInstall R\n\nTo install R, you need to download the installer from the R website\nClick on either base or install R for the first time\nClick on the download R for Windows link\nOnce downloaded, open the .exe file and follow the installation instructions on your computer\n\n\n\nInstall RStudio\n\nTo install RStudio we download it from the Posit website\nClick on the Download RStudio Desktop link\nOnce downloaded, open the .exe file and follow the installation instructions on your computer",
    "crumbs": [
      "💻 R workshops",
      "🛠️ Install R and RStudio"
    ]
  },
  {
    "objectID": "install.html#mac-install",
    "href": "install.html#mac-install",
    "title": "Installing R and RStudio",
    "section": "Mac install",
    "text": "Mac install\n\nInstall R\nTo install R on your Mac you need to know the type of processor your Mac uses. This is straightforward to find out:\n\nOn the top navigation bar on your Mac, click on the apple icon\nFrom the drop down menu, select About This Mac\nIn Overview you will find the information about your Mac. If you have an Intel Mac, you will see the processor row, which has information that includes Intel. If you have an M1 or M2 Mac, you will see chip and M1/M2 in the Overview with something like Chip Apple M1\n\n \n\nM1 or M2 Mac\n\nTo install R, you need to download the installer from the R website\nIf you have a M1 Mac you will need click on the link the contains arm64 to download R. It will look something like R-4.3.1-arm64.pkg\nOnce downloaded, open the .pkg file and follow the installation instructions\n\n\n\nIntel Mac\n\nTo install R, you need to download the installer from the R website\nIf you have a Intel Mac you will need to click on the link that just contains the version of R. It will look something like R-4.3.1.pkg, and can be located a touch further down the page under the header Binaries for legacy macOS/OS X systems:\nOnce downloaded, open the .pkg file and follow the installation instructions\n\n\n\n\nInstall XQuartz\nTo run R on a Mac operating system, XQuartz is required. You can install it by following this link, downloading it and following the installation instructions.\n\n\nInstall RStudio\n\nTo install RStudio we download it from the Posit website\nClick on the Download RStudio Desktop link\nOnce downloaded, open the .dmg file and follow the installation instructions on your computer",
    "crumbs": [
      "💻 R workshops",
      "🛠️ Install R and RStudio"
    ]
  },
  {
    "objectID": "install.html#installing-r-and-rstudio-installation-issues",
    "href": "install.html#installing-r-and-rstudio-installation-issues",
    "title": "Installing R and RStudio",
    "section": "Installing R and RStudio installation issues",
    "text": "Installing R and RStudio installation issues\nIf your installation for R and RStudio did not work, this is likely because your computer is running an older operating system. In these cases you will have to install an older version of the software.\nIt will be simplest, if you have faced installation issues, for you to come to a R workshop for support or book a 1-2-1 support session.",
    "crumbs": [
      "💻 R workshops",
      "🛠️ Install R and RStudio"
    ]
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "In this page we list some of the most frequently asked questions about R, the workshops, or other more general topics.",
    "crumbs": [
      "❓ Other information",
      "ℹ️ FAQ"
    ]
  },
  {
    "objectID": "faq.html#what-is-r",
    "href": "faq.html#what-is-r",
    "title": "FAQ",
    "section": "What is R?",
    "text": "What is R?\nR is an open-source, widely used statistical programming language, that is easy to learn and, thanks to its many extensions, can be used as a general-purpose programming language. R was first released in 1993 and has since risen greatly in popularity, being used in academic institutions as well as companies such as the BBC, NHS, Google, Facebook, Twitter, Microsoft, Office of National Statistics (ONS), Wellcome, Sanger Institute, New York Times, Financial Times, and Mozilla.\nR is simple to use and easy to read, this makes sharing your code easier and enables you to write your code faster. This is taken further by the Tidyverse ecosystem within R, that provides even easier to read code as well as excellent documentation. R is one of the best choices for data science and machine learning due to its wide pool of libraries for statistics, data manipulation and wrangling, data visualisation, and modelling; it is used across many sectors such as finance, healthcare, technology and retail for these purposes. R is the gold standard choice for data visualisation in data science thanks to the ggplot2 library and its many extensions. R also has one of the best open-source Integrated Development Environments (IDE) available in RStudio, not only does it make programming in R easy, it makes it simple to create documents with your code and outputs in various output formats such as HTML, Word, Powerpoint, and PDF.",
    "crumbs": [
      "❓ Other information",
      "ℹ️ FAQ"
    ]
  },
  {
    "objectID": "faq.html#workshops",
    "href": "faq.html#workshops",
    "title": "FAQ",
    "section": "Workshops",
    "text": "Workshops\n\nWhat should I do if I get stuck\n\nAsk your neighbour in the workshop\nSearch online:\n\n\nThe answer box on the top of Google’s results page\nhttps://stackoverflow.com/ (for task-specific solutions)\nhttps://www.r-bloggers.com/ (topic based tutorials)\nhttps://www.w3schools.com/r/ (w3 schools short tutorials)\nhttps://www.geeksforgeeks.org/r-programming-language-introduction/ (geeks for geeks R tutorials)\nhttp://www.cookbook-r.com/ (R cookbook)\n\n\nDon’t struggle too long looking online, ask the trainer if you can’t find a solution!\n\n\n\nWhy do we use this style of training?\nWe prefer a “learner-led” style of teaching, where you work at your own pace supported by trainers. In the real-world, this is similar to how you would learn to use software, searching online and asking for help while trying to solve problems.",
    "crumbs": [
      "❓ Other information",
      "ℹ️ FAQ"
    ]
  },
  {
    "objectID": "faq.html#r-vs-python",
    "href": "faq.html#r-vs-python",
    "title": "FAQ",
    "section": "R vs Python",
    "text": "R vs Python\nR and Python are quite similar tools and have a lot of overlap in their use cases. Generally speaking Python is better for advanced machine learning (such as neural nets and deep learning), and has better infrastructure for making code “production ready”. R on the other hand is better for statistics and data visualisation, and would be a good choice for small to medium size projects.\nUsually I would just go with whatever feels right when using or suits your use case better. If you are looking to get serious about software development or advanced machine learning, give Python a try. If you want an easier time with data wrangling, statistics, and data visualisation, then R is a great place for those tasks. If you can’t decide, try out both and see what feels better.",
    "crumbs": [
      "❓ Other information",
      "ℹ️ FAQ"
    ]
  },
  {
    "objectID": "faq.html#r-vs-other-software-such-as-tableauexcelpower-bistataspss",
    "href": "faq.html#r-vs-other-software-such-as-tableauexcelpower-bistataspss",
    "title": "FAQ",
    "section": "R vs other software such as Tableau/Excel/Power Bi/Stata/SPSS",
    "text": "R vs other software such as Tableau/Excel/Power Bi/Stata/SPSS\nR, like Python, is a programming language. When you compare it to other software such as Excel or Stata, these are applications where functionality is wrapped up in a more user friendly style. The main reasons to use R other application based software are:\n\nIt is better at automation. If you are regularly running and analysis, R will be easier in the long run than software like SPSS or Stata\nR has more flexibility, meaning you can theoretically do almost anything. Application based software like Excel have limitations which can be difficult to overcome. For example, Excel has a row limit.\nR is “open-source”, which means you do not need to pay for a licence to use. This is massive advantage over software like Tableau or Power BI which are expensive.\nR isn’t just for statistics, or wrangling data. You can write reports, websites, presentations, and dashboards just using R. This flexibility isn’t possible in software like SPSS or Excel.",
    "crumbs": [
      "❓ Other information",
      "ℹ️ FAQ"
    ]
  },
  {
    "objectID": "using-files.html",
    "href": "using-files.html",
    "title": "Information on how to use R Scripts and Markdown files",
    "section": "",
    "text": "If you have not done so already, open RStudio!\n\n\n\nType RStudio in the search bar (bottom left, next to windows symbol)\nIf you prefer, open the start menu (click windows symbol), then scroll until you find RStudio\n\n\n\n\n\nHit command + space and type in RStudio\nIf you prefer to look for RStudio in an applications folder (open finder and select Applications on the left panel), you should be looking for this icon: \n\nWhen RStudio opens you should see a layout with 3 panels, similar to the image below.\n\n\n\nRStudio, image from 2023\n\n\nThe largest panel on the left with the &gt; is the console. On the bottom right there is the files/plot panel, and top right is the environment panel.\nIf your installation of R and RStudio has worked, first RStudio should be open, and second you should see a message in your console panel telling you the version of R you have installed, like the image below.\n\n\n\nR version displayed in RStudio console\n\n\nThere are three ways of running R code: console, scripts and R Markdown. In the R workshops we use R Markdown.",
    "crumbs": [
      "💻 R workshops",
      "📁 Using R files"
    ]
  },
  {
    "objectID": "using-files.html#opening-rstudio",
    "href": "using-files.html#opening-rstudio",
    "title": "Information on how to use R Scripts and Markdown files",
    "section": "",
    "text": "If you have not done so already, open RStudio!\n\n\n\nType RStudio in the search bar (bottom left, next to windows symbol)\nIf you prefer, open the start menu (click windows symbol), then scroll until you find RStudio\n\n\n\n\n\nHit command + space and type in RStudio\nIf you prefer to look for RStudio in an applications folder (open finder and select Applications on the left panel), you should be looking for this icon: \n\nWhen RStudio opens you should see a layout with 3 panels, similar to the image below.\n\n\n\nRStudio, image from 2023\n\n\nThe largest panel on the left with the &gt; is the console. On the bottom right there is the files/plot panel, and top right is the environment panel.\nIf your installation of R and RStudio has worked, first RStudio should be open, and second you should see a message in your console panel telling you the version of R you have installed, like the image below.\n\n\n\nR version displayed in RStudio console\n\n\nThere are three ways of running R code: console, scripts and R Markdown. In the R workshops we use R Markdown.",
    "crumbs": [
      "💻 R workshops",
      "📁 Using R files"
    ]
  },
  {
    "objectID": "using-files.html#r-scripts",
    "href": "using-files.html#r-scripts",
    "title": "Information on how to use R Scripts and Markdown files",
    "section": "R Scripts",
    "text": "R Scripts\n\n\n\n\n\n\nWhat are R Scripts?\n\n\n\nAn R Script file is a text file that contains a set of commands, or code, written in the R programming language. They are simple to use, allowing you to save the code you have written for later.\nAn in-depth description can be found in the R for Data Science open source book\n\n\n\nOpening R Scripts\nIf you move your mouse/curser to the top of your screen you will see a banner with file, edit, code etc. Using File &gt; Open File..., find the R script file to load. R script files have the extension .R.\nTo start a new R script file go to File &gt; New File &gt; R Script, or use the keyboard shortcut ctrl/command + shift + N.\n\n\nUsing R Scripts\nThe below image shows an R Script in action.\n\n\n\n\n\n\n\nImage of R Script\n\n\nThere are two main ways of running code in an R Script.\n\nUse ctrl/command + Enter to run each line\nHighlight a section of code, and use the run button (or press ctrl/command + Enter)\n\nYou might notice code you have run appears on the console (bottom left), and if you make a variable that will appear in the Environment (top right).",
    "crumbs": [
      "💻 R workshops",
      "📁 Using R files"
    ]
  },
  {
    "objectID": "using-files.html#r-markdown",
    "href": "using-files.html#r-markdown",
    "title": "Information on how to use R Scripts and Markdown files",
    "section": "R Markdown",
    "text": "R Markdown\n\n\n\n\n\n\nWhat is R Markdown?\n\n\n\nAn R Markdown file has sections of text and code together in a single document. This is helpful for tutorials, documentation, and writing reports.\nAn in-depth description can be found in the R for Data Science open source book\n\n\n\nOpening R Markdown files\nOpening a R Markdown file is very similar to opening a file in other software. If you move your mouse/curser to the top of your screen you will see a banner with file, edit, code etc. Using File &gt; Open File..., find the R Markdown file to load. R Markdown files have the extension .Rmd.\nTo start a new R markdown file go to File &gt; New File &gt; R Markdown....\n\n\nUsing a R Markdown file\nWe are using R Markdown notebooks for these workshops as we can add text around code, which can help us guide you. The image below shows the basic layout of a R Markdown document.\n\n\n\n\n\n\n\nImage of R Markdown notebook, indicating the text and code sections\n\n\nThere are three ways to run code in a code cell. The two ways mentioned in the image (Run and play button), and third is to use ctrl/command + Enter to run each line just like you would with an R script.\nThe most important thing for you to take note of is the code cells. Each code cell is like a small R script. You’ll notice the ``` markings around the code cell. It is important these do not get deleted, so be careful when editing your code!\nFinally, you can add your own code cell using option+command+i on a Mac or ctrl + alt + i on a Windows machine.\nThroughout the notebooks you will come across exercises, with empty code cells for you to type your code into. Your task is to test out the examples, then try and do the exercises.\n\n\n\n\n\n\nNote\n\n\n\nIf you have struggled with any of these steps ask a trainer for support\n\n\n\n\n\nRStudio, image from 2023\nR version displayed in RStudio console\nImage of R Script\nImage of R Markdown notebook, indicating the text and code sections",
    "crumbs": [
      "💻 R workshops",
      "📁 Using R files"
    ]
  }
]